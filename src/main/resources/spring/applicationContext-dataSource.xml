<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${dataSource.driver}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${dataSource.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${dataSource.maxActive}"></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${dataSource.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${dataSource.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${dataSource.maxWait}"></property>
		<!-- 当数据库连接池中的连接被创建而长时间不使用的情况下，该连接会自动回收并失效，但客户端并不知道，在进行数据库操作时仍然使用的是无效的数据库连接，这样，就导致客户端程序报“ java.sql.SQLException: Io 异常: Connection reset” 或“java.sql.SQLException 关闭的连接”异常。 -->
		<!-- 配置后，客户端在使用一个无效的连接时会先对该连接进行测试，如果发现该连接已经无效，则重新从连接池获取有效数据库连接来使用。 -->
		<!-- https://blog.csdn.net/youngxv/article/details/79492622 -->
		<!-- https://blog.csdn.net/liweibin_/article/details/18315483 -->
		<property name="validationQuery" value="select 1"/>
	</bean>

	<!-- spring和MyBatis整合，spring 生成SqlSessionFactory，并结合下面一条bean扫描dao，从而自动获取了dao接口的实现类 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis 配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations"
			value="classpath:mapper/*Mapper.xml"></property>
		<!-- 扫描java bean，自动使用别名 -->
		<property name="typeAliasesPackage" value="top.seiei.mall.bean"/>

		<!-- 分页插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=sqlserver
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 扫描dao -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="top.seiei.saasaps.dao" />
		<property name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory"></property>
	</bean>
		
	<!-- 使用@Transactional 进行声明式事务管理需要声明下面这行 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- 配置事务管理器  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<!-- 事务失败后是否回滚 -->
		<property name="rollbackOnCommitFailure" value="true"></property>
	</bean>
	
</beans>